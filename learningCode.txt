今天学习的git代码是：
1，初始化一个Git仓库： git init
2，添加文件，git add
3，提交文件，git commit
4，查看历史记录，git log，也可以看简洁版的，git log --pretty=oneline，可视化的：git-log-timeline
5，把当前版本回退过去，git reset --hard HEAD^
6，查看内容：cat readme.txt
7，命令记录：git reflog
8，可以用git status查看修改状态
9，git diff; git diff --cached，好奇怪，为什么我add以后，git diff从第开始就一直都是绿色，有可能是我之前没有提交？
10，工作区、缓冲区和仓库概率很重要，这三个的单词分别是working directory; repository(stage, master)
11，关掉bash再打开会出现不能理解的问题，直接输入git commit也是，可以git init但是貌似这样把之前的信息就删掉了, init以后要注意文件目录，先pwd再用cd，把目录改到自己指定的文件夹中
12，fatal: not a git repository (or any of the parent directories): .git 很多说是本地管理仓库被删除了
13，只有修改后add的才会被commit
14，写错的还可以撤销；git checkout -- file; git reset HEAD file; git reset --hard head
15，我的猜测，我们在电脑上运行写出来的文件所在位置是working directory,然后提交到Git上的位置叫repository，当我们add后，文件复制到stage，commit以后复制到master。
16，15的猜测是错误的
17，现在进行git的撤销修改操作，add以后进行checkout就不好使了
18，git reset HEAD~ learningCode.txt head后面还是要加~的
19，reset HEAD是把本地仓库的head指针往前移动，把从head往后的内容复制到stage当中，checkout是把stage当中的复制到工作区
20，创建和合并分支：查看分支：git branch；创建分支：git branch <name>； 切换分支： git checkout <name>；创建+切换分支：git checkout -b <name>；合并某分支到当前分支：git merge <name>；删除分支：git branch -d <name>
21，在实际开发中，应该按照几个基本原则进行分支管理，首先master分支应该是非常稳定，仅用来发布新版本，平时不能在上面干活，所以一般在分支上干活，分支是不稳定的。
22，在合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
